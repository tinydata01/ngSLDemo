{"version":3,"sources":["../../../projects/onemoney-headless-websdk/src/lib/env.service.ts","../../../projects/onemoney-headless-websdk/src/lib/onemoney-websdk.service.ts"],"names":["this","apiUrl","uatUrl","prodUrl","devUrl","omApiUrl","enableDebug","Injectable","args","providedIn","APINAME","OnemoneyWebsdkService","http","envService","url","prototype","discoverAccount","fipId","identifier","sessionId","Error","sessionID","sessionStorage","getItem","header","HttpHeaders","Content-Type","options","method","data","headers","body","identifiers","category","type","value","request","pipe","map","res","error","of","getUserProfile","accountAuth","account","accType","accRefNumber","maskedAccNumber","fiId","userInfo","accountVerify","refNumber","authToken","loginOTP","organisationId","client_id","client_secret","appIdentifier","phone_number","loginOTPVerify","otp_reference","code","response","setItem","getListOfLinkedAccounts","getDiscoveredAccountList","logout","verifyVua","organisationid","clientId","clientSecret","userRegistration","verifyOtp","status","registerAsCorpUser","sessionToken","getFipList","sessionid","customerDashboard","getConsentDetails","approve","reject","consentOTP","consentAllow","consentDeny","multiAccountlink","identifierGenerateOTP","Object","assign","actionType","identifierVerifyOTP","verifyOnemoneyProfile","discoverAccountFIP","HttpClient","EnvService"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EnvService {\r\n\r\n  //API URL for Onemoney Web\r\n  public apiUrl = 'https://api-sandbox.onemoney.in/';\r\n  public uatUrl = 'https://app-uat.onemoney.in/';\r\n  public prodUrl = 'https://aa-app.onemoney.in/';\r\n  public devUrl = 'https://dev-aa-app.aws.onemoney.in/';\r\n  \r\n  //public prodUrl = 'https://api-sandbox.onemoney.in/';\r\n\r\n  \r\n  //Base URL for Web SDK of Onemoney Server\r\n  public omApiUrl = '';\r\n  public enableDebug = true;\r\n\r\n  constructor() { }\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { EnvService } from './env.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\n\r\nconst APINAME = {\r\n  userProfile: 'user/user-profile',\r\n  discover: 'sdk/api/v1/accounts/discover',\r\n  authtrigger: 'sdk/api/v1/account/auth/trigger',\r\n  accountverify: 'sdk/api/v1/account/auth/verify',\r\n  loginOTPVerify: 'app/loginwithotp/verify',\r\n  accountlist: 'sdk/api/v1/linkedaccount/list',\r\n  discoveredaccountlist: 'sdk/api/v1/discoveredaccount/list',\r\n  logout: 'user/logout',\r\n  loginOTPSend: 'app/loginwithotp/send',\r\n  OTPSend:'app/otp/send',\r\n\r\n  verifyvua: 'user/verifyvua',\r\n  userRegistration: 'user/sdksignupwithotp/send',\r\n  verifyotp: 'user/sdksignupwithotp/verify',\r\n  regascorpuser: 'sdk/api/v1/session/init',\r\n  fipList: 'app/fip',\r\n  \r\n\r\n  // concent approval and rejection.\r\n  customerDashboard: 'app/dashboard',\r\n  consentDetails: 'sdk/api/v1/bulkconsent/info',\r\n  approveConsent: 'sdk/api/v1/consentwithauth/allow',\r\n  rejectConsent: 'sdk/api/v1/consentwithauth/deny',\r\n\r\n  consentAllow: 'sdk/api/v1/consent/allow',\r\n  consentDeny: 'sdk/api/v1/consent/deny',\r\n  multiAccountlink: 'sdk/api/v1/bulkaccount/auth/trigger',\r\n  //Phase 3 new APIs\r\n  otpValidate:'app/otp/validate',\r\n  verifyProfileVua:'user/verifyprofile',\r\n  //discover API \r\n  accountdiscover:'sdk/api/v1/accounts/discover/multiplefips'\r\n};\r\n@Injectable({\r\n  providedIn:'root'\r\n})\r\n\r\nexport class OnemoneyWebsdkService {\r\n  url: string;\r\n\r\n  constructor(private http: HttpClient, private envService: EnvService) {\r\n    this.url = this.envService.uatUrl;\r\n  }\r\n\r\n\r\n  /**\r\n   * To discover accounts\r\n   * @param fipId\r\n   * @param identifier\r\n   * @param sessionId\r\n   */\r\n  discoverAccount(fipId: string, identifier: { category: string, type: string, value: string }[], sessionId?: string) {\r\n    try {\r\n      if (!fipId && !identifier) { throw new Error('Flip Id && Identifier is required'); }\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.discover}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: {\r\n          identifiers: [{\r\n            category: `${identifier[0].category}`, type: `${identifier[0].type}`,\r\n            value: `${identifier[0].value}`\r\n          }], fipId: `${fipId}`\r\n        }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To get list of discovered acccounts\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  getUserProfile(sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'GET',\r\n        url: `${this.url}${APINAME.userProfile}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n  /**\r\n   * To auth Trigger accounts // Link Accounts with OTP SEND\r\n   * @param account\r\n   * @param sessionId\r\n   */\r\n  accountAuth(account: {\r\n    type: string, data: {\r\n      accType: string, accRefNumber: string,\r\n      maskedAccNumber: string, fipId: string, userInfo: {}\r\n    }\r\n  },          sessionId?: string) {\r\n    try {\r\n      if (!account) { throw new Error('Account is required'); }\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.authtrigger}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: {\r\n          account: {\r\n            type: `${account.type}`, data: {\r\n              accType: `${account.data.accType}`,\r\n              // tslint:disable-next-line: max-line-length\r\n              accRefNumber: `${account.data.accRefNumber}`, maskedAccNumber: `${account.data.maskedAccNumber}`, fiId: `${account.data.fipId}`, userInfo: `${account.data.userInfo}`\r\n            }\r\n          }\r\n        }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To auth Trigger accounts // Link Accounts with OTP Verify\r\n   * @param refNumber\r\n   * @param authToken\r\n   * @param sessionId\r\n   */\r\n  accountVerify(refNumber: string, authToken: string, sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`,\r\n      });\r\n\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.accountverify}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: { refNumber: `${refNumber}`, authToken: `${authToken}` }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To auth Trigger accounts // Link Accounts with OTP Verify\r\n   * @param organisationId\r\n   * @param client_id\r\n   * @param client_secret\r\n   * @param appIdentifier\r\n   * @param phone_number\r\n   */\r\n  loginOTP(organisationId: string, client_id: string, client_secret: string,\r\n           appIdentifier:[{ appName?:String, appIdentifier: string }], phone_number: string) {\r\n    try {\r\n      if (!organisationId) { throw new Error('organisationId is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        organisationId: `${organisationId}`,\r\n        client_id: `${client_id}`,\r\n        client_secret: `${client_secret}`,\r\n        appIdentifier: `${appIdentifier}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.loginOTPSend}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: { phone_number: `${phone_number}` }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Login otp validation for a user session, through the SDK // Link Accounts with OTP Verify.\r\n   * @param organisationId\r\n   * @param client_id\r\n   * @param client_secret\r\n   * @param appIdentifier\r\n   * @param phone_number\r\n   * @param otp_reference\r\n   * @param code\r\n   */\r\n  loginOTPVerify(organisationId: string, client_id: string, client_secret: string,\r\n                 appIdentifier: {appName?: string, appIdentifier: string }[], phone_number: string, otp_reference: string, code: string) {\r\n    try {\r\n      if (!organisationId) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        organisationId: `${organisationId}`,\r\n        client_id: `${client_id}`,\r\n        client_secret: `${client_secret}`,\r\n        appIdentifier: `${appIdentifier}`\r\n      });\r\n\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.loginOTPVerify}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: { phone_number: `${phone_number}`, otp_reference: `${otp_reference}`, code: `${code}` }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            if (response.sessionId) { sessionStorage.setItem('sessionId', response.sessionId); }\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * GET Linked Accounts List.\r\n   * @param sessionId\r\n   * Returns the list of linked accounts by the customer.\r\n   */\r\n  getListOfLinkedAccounts(sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'GET',\r\n        url: `${this.url}${APINAME.accountlist}`,\r\n      };\r\n      const data: any = {\r\n        headers: header\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * GET Discovered Accounts List\r\n   * @param sessionId\r\n   * Returns the list of discovered accounts.\r\n   */\r\n  getDiscoveredAccountList(sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'GET',\r\n        url: `${this.url}${APINAME.discoveredaccountlist}`,\r\n      };\r\n      const data: any = {\r\n        headers: header\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * POST Logout // Intended for a consent manager to enable a user to logout of his session.\r\n   * @param sessionId\r\n   */\r\n  logout(sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.logout}`,\r\n      };\r\n      const data: any = {\r\n        headers: header\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify uva\r\n   * @param organisationid\r\n   * @param clientId\r\n   * @param clientSecret\r\n   * @param appIdentifier\r\n   * @param body\r\n   */\r\n  verifyVua(organisationid: string, clientId: string, clientSecret: string, appIdentifier: { appName?: string, appIdentifier: string }[],\r\n            body: { vua: string }): any {\r\n    try {\r\n      if (!organisationid || !clientId || !clientSecret || !body) { throw new Error('All parameters are required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          organisationId: organisationid,\r\n          client_id: clientId,\r\n          client_secret: clientSecret,\r\n          appIdentifier: `${appIdentifier}`\r\n        }),\r\n        body: body ? body : null,\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.verifyvua, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * User Registration\r\n   * @param organisationid\r\n   * @param clientId\r\n   * @param clientSecret\r\n   * @param body\r\n   */\r\n  userRegistration(organisationid: string, clientId: string, clientSecret: string,\r\n                   appIdentifier: { appName?: string, appIdentifier: string }[], body: {\r\n                   name: string, phone_number: string, terms_and_conditions: boolean, vua: string }): any {\r\n    try {\r\n      if (!organisationid || !clientId || !clientSecret || !body) { throw new Error('All parameters are required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          organisationId: organisationid,\r\n          client_id: clientId,\r\n          client_secret: clientSecret,\r\n          appIdentifier: `${appIdentifier}`\r\n        }),\r\n        body: body ? body : null,\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.userRegistration, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify OTP\r\n   * @param organisationid\r\n   * @param clientId\r\n   * @param clientSecret\r\n   * @param body\r\n   */\r\n  verifyOtp(organisationid: string, clientId: string, clientSecret: string,\r\n            appIdentifier: { appName?: string, appIdentifier: string }[],\r\n            body: { phone_number: string, otp_reference: string, code: string }): any {\r\n\r\n    try {\r\n      if (!organisationid || !clientId || !clientSecret || !body) { throw new Error('All parameters are required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          organisationId: organisationid,\r\n          client_id: clientId,\r\n          client_secret: clientSecret,\r\n          appIdentifier: `${appIdentifier}`\r\n        }),\r\n        body: body ? body : null,\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.verifyotp, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            if (response.status && response.sessionId) {\r\n              sessionStorage.setItem('sessionId', response.sessionId);\r\n            }\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register as Corporate User.\r\n   * @param body\r\n   */\r\n  registerAsCorpUser(body: { mobileNumber: string, timestamp: string, pan: string }): any {\r\n    try {\r\n      if (!body) { throw new Error('All parameters are required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n        }),\r\n        body: body ? body : null,\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.regascorpuser, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            if (response.status === 'SUCCESS' && response.sessionToken) {\r\n              sessionStorage.setItem('sessionToken', response.sessionToken);\r\n            }\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get FIP List.\r\n   * @param sessionId\r\n   */\r\n  getFipList(sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n      };\r\n      return this.http\r\n        .request('GET', this.url + APINAME.fipList, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  // concent approval and rejection.\r\n\r\n  /**\r\n   * Customer Dashboard/\r\n   * @param sessionId\r\n   */\r\n  customerDashboard(sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n      };\r\n      return this.http\r\n        .request('GET', this.url + APINAME.customerDashboard, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Consent Request Details\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  getConsentDetails(body: { consentHandles: string[] }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.consentDetails, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Approve Consent with Authentication\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  approve(body: {consentHandle: string, otp: string, accounts: {type: string, data: {accType: string,\r\n          accRefNumber: string, maskedAccNumber: string, fipId: string, userInfo: {}}}[]},\r\n          sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.approveConsent, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n  /**\r\n   * Reject Consent with Authentication\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  reject(body: { consentHandle: string, otp: string }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.rejectConsent, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reject Consent with Authentication\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  consentOTP(body: { actionType: string,identifierValue:string,identifierType:string }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.OTPSend, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n \r\n  /**\r\n   * Consent Allow\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  consentAllow(body: { consentHandle: string,\r\n    accounts: {\r\n        type: string,\r\n        data: {\r\n          accType: string,\r\n          accRefNumber: string,\r\n          maskedAccNumber: string,\r\n          fipId: string,\r\n          userInfo: {}}\r\n      }[]}, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid,\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST',this.url + APINAME.consentAllow, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Consent Deny\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  consentDeny(body: { consentHandle: string}, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.consentDeny, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Multi Account Link\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  multiAccountlink(body: { \r\n    accounts: {\r\n        type: string,\r\n        data: {\r\n          accType: string,\r\n          accRefNumber: string,\r\n          maskedAccNumber: string,\r\n          fipId: string,\r\n          userInfo: {}}\r\n      }[]}, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.multiAccountlink, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n// identifierGenerateOTP\r\n// identifierVerifyOTP\r\n/**\r\n   * OTP Generation without action Type\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  identifierGenerateOTP(body: { identifierValue:string,identifierType:string }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? {actionType:'VERIFY_IDENTIFIER', ...body } : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.OTPSend, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n /**\r\n   * OTP Validation\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  identifierVerifyOTP(body: { \r\n    actionType:String,\r\n    OTP:String,\r\n    identifierValue:String,\r\n    identifierType:string\r\n    }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? {actionType:'VERIFY_IDENTIFIER', ...body } : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.otpValidate, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n  /**\r\n   * Check mobile number VUA\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  verifyOnemoneyProfile(organisationid: string, clientId: string, clientSecret: string,\r\n    appIdentifier: { appName?: string, appIdentifier: string }[],\r\n    body: { username: string, }): any {\r\n    try {\r\n      //const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!body) { throw new Error('Body is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          organisationId: organisationid,\r\n          client_id: clientId,\r\n          client_secret: clientSecret,\r\n          appIdentifier: `${appIdentifier}`,\r\n          \r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.verifyProfileVua, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n\r\n    }\r\n\r\n    /**\r\n   * Account discovery API\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  discoverAccountFIP(identifier: { category: string, type: string, value: string }[],fipId?: string, sessionId?: string) {\r\n    try {\r\n      if (!identifier) { throw new Error('Identifier is required'); }\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.accountdiscover}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: {\r\n          identifiers: [{\r\n            category: `${identifier[0].category}`, type: `${identifier[0].type}`,\r\n            value: `${identifier[0].value}`\r\n          }], fipId: `${fipId}`\r\n        }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n}\r\n"]}