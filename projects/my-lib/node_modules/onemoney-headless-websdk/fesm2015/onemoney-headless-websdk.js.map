{"version":3,"file":"onemoney-headless-websdk.js","sources":["../../../projects/onemoney-headless-websdk/src/lib/env.service.ts","../../../projects/onemoney-headless-websdk/src/lib/onemoney-websdk.service.ts","../../../../projects/onemoney-headless-websdk/src/public-api.ts","../../../../projects/onemoney-headless-websdk/src/onemoney-headless-websdk.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EnvService {\r\n\r\n  //API URL for Onemoney Web\r\n  public apiUrl = 'https://api-sandbox.onemoney.in/';\r\n  public uatUrl = 'https://app-uat.onemoney.in/';\r\n  public prodUrl = 'https://aa-app.onemoney.in/';\r\n  public devUrl = 'https://dev-aa-app.aws.onemoney.in/';\r\n  \r\n  //public prodUrl = 'https://api-sandbox.onemoney.in/';\r\n\r\n  \r\n  //Base URL for Web SDK of Onemoney Server\r\n  public omApiUrl = '';\r\n  public enableDebug = true;\r\n\r\n  constructor() { }\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { EnvService } from './env.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\n\r\nconst APINAME = {\r\n  userProfile: 'user/user-profile',\r\n  discover: 'sdk/api/v1/accounts/discover',\r\n  authtrigger: 'sdk/api/v1/account/auth/trigger',\r\n  accountverify: 'sdk/api/v1/account/auth/verify',\r\n  loginOTPVerify: 'app/loginwithotp/verify',\r\n  accountlist: 'sdk/api/v1/linkedaccount/list',\r\n  discoveredaccountlist: 'sdk/api/v1/discoveredaccount/list',\r\n  logout: 'user/logout',\r\n  loginOTPSend: 'app/loginwithotp/send',\r\n  OTPSend:'app/otp/send',\r\n\r\n  verifyvua: 'user/verifyvua',\r\n  userRegistration: 'user/sdksignupwithotp/send',\r\n  verifyotp: 'user/sdksignupwithotp/verify',\r\n  regascorpuser: 'sdk/api/v1/session/init',\r\n  fipList: 'app/fip',\r\n  \r\n\r\n  // concent approval and rejection.\r\n  customerDashboard: 'app/dashboard',\r\n  consentDetails: 'sdk/api/v1/bulkconsent/info',\r\n  approveConsent: 'sdk/api/v1/consentwithauth/allow',\r\n  rejectConsent: 'sdk/api/v1/consentwithauth/deny',\r\n\r\n  consentAllow: 'sdk/api/v1/consent/allow',\r\n  consentDeny: 'sdk/api/v1/consent/deny',\r\n  multiAccountlink: 'sdk/api/v1/bulkaccount/auth/trigger',\r\n  //Phase 3 new APIs\r\n  otpValidate:'app/otp/validate',\r\n  verifyProfileVua:'user/verifyprofile',\r\n  //discover API \r\n  accountdiscover:'sdk/api/v1/accounts/discover/multiplefips'\r\n};\r\n@Injectable({\r\n  providedIn:'root'\r\n})\r\n\r\nexport class OnemoneyWebsdkService {\r\n  url: string;\r\n\r\n  constructor(private http: HttpClient, private envService: EnvService) {\r\n    this.url = this.envService.uatUrl;\r\n  }\r\n\r\n\r\n  /**\r\n   * To discover accounts\r\n   * @param fipId\r\n   * @param identifier\r\n   * @param sessionId\r\n   */\r\n  discoverAccount(fipId: string, identifier: { category: string, type: string, value: string }[], sessionId?: string) {\r\n    try {\r\n      if (!fipId && !identifier) { throw new Error('Flip Id && Identifier is required'); }\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.discover}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: {\r\n          identifiers: [{\r\n            category: `${identifier[0].category}`, type: `${identifier[0].type}`,\r\n            value: `${identifier[0].value}`\r\n          }], fipId: `${fipId}`\r\n        }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To get list of discovered acccounts\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  getUserProfile(sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'GET',\r\n        url: `${this.url}${APINAME.userProfile}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n  /**\r\n   * To auth Trigger accounts // Link Accounts with OTP SEND\r\n   * @param account\r\n   * @param sessionId\r\n   */\r\n  accountAuth(account: {\r\n    type: string, data: {\r\n      accType: string, accRefNumber: string,\r\n      maskedAccNumber: string, fipId: string, userInfo: {}\r\n    }\r\n  },          sessionId?: string) {\r\n    try {\r\n      if (!account) { throw new Error('Account is required'); }\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.authtrigger}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: {\r\n          account: {\r\n            type: `${account.type}`, data: {\r\n              accType: `${account.data.accType}`,\r\n              // tslint:disable-next-line: max-line-length\r\n              accRefNumber: `${account.data.accRefNumber}`, maskedAccNumber: `${account.data.maskedAccNumber}`, fiId: `${account.data.fipId}`, userInfo: `${account.data.userInfo}`\r\n            }\r\n          }\r\n        }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To auth Trigger accounts // Link Accounts with OTP Verify\r\n   * @param refNumber\r\n   * @param authToken\r\n   * @param sessionId\r\n   */\r\n  accountVerify(refNumber: string, authToken: string, sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`,\r\n      });\r\n\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.accountverify}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: { refNumber: `${refNumber}`, authToken: `${authToken}` }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To auth Trigger accounts // Link Accounts with OTP Verify\r\n   * @param organisationId\r\n   * @param client_id\r\n   * @param client_secret\r\n   * @param appIdentifier\r\n   * @param phone_number\r\n   */\r\n  loginOTP(organisationId: string, client_id: string, client_secret: string,\r\n           appIdentifier:[{ appName?:String, appIdentifier: string }], phone_number: string) {\r\n    try {\r\n      if (!organisationId) { throw new Error('organisationId is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        organisationId: `${organisationId}`,\r\n        client_id: `${client_id}`,\r\n        client_secret: `${client_secret}`,\r\n        appIdentifier: `${appIdentifier}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.loginOTPSend}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: { phone_number: `${phone_number}` }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Login otp validation for a user session, through the SDK // Link Accounts with OTP Verify.\r\n   * @param organisationId\r\n   * @param client_id\r\n   * @param client_secret\r\n   * @param appIdentifier\r\n   * @param phone_number\r\n   * @param otp_reference\r\n   * @param code\r\n   */\r\n  loginOTPVerify(organisationId: string, client_id: string, client_secret: string,\r\n                 appIdentifier: {appName?: string, appIdentifier: string }[], phone_number: string, otp_reference: string, code: string) {\r\n    try {\r\n      if (!organisationId) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        organisationId: `${organisationId}`,\r\n        client_id: `${client_id}`,\r\n        client_secret: `${client_secret}`,\r\n        appIdentifier: `${appIdentifier}`\r\n      });\r\n\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.loginOTPVerify}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: { phone_number: `${phone_number}`, otp_reference: `${otp_reference}`, code: `${code}` }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            if (response.sessionId) { sessionStorage.setItem('sessionId', response.sessionId); }\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * GET Linked Accounts List.\r\n   * @param sessionId\r\n   * Returns the list of linked accounts by the customer.\r\n   */\r\n  getListOfLinkedAccounts(sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'GET',\r\n        url: `${this.url}${APINAME.accountlist}`,\r\n      };\r\n      const data: any = {\r\n        headers: header\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * GET Discovered Accounts List\r\n   * @param sessionId\r\n   * Returns the list of discovered accounts.\r\n   */\r\n  getDiscoveredAccountList(sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'GET',\r\n        url: `${this.url}${APINAME.discoveredaccountlist}`,\r\n      };\r\n      const data: any = {\r\n        headers: header\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * POST Logout // Intended for a consent manager to enable a user to logout of his session.\r\n   * @param sessionId\r\n   */\r\n  logout(sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.logout}`,\r\n      };\r\n      const data: any = {\r\n        headers: header\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify uva\r\n   * @param organisationid\r\n   * @param clientId\r\n   * @param clientSecret\r\n   * @param appIdentifier\r\n   * @param body\r\n   */\r\n  verifyVua(organisationid: string, clientId: string, clientSecret: string, appIdentifier: { appName?: string, appIdentifier: string }[],\r\n            body: { vua: string }): any {\r\n    try {\r\n      if (!organisationid || !clientId || !clientSecret || !body) { throw new Error('All parameters are required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          organisationId: organisationid,\r\n          client_id: clientId,\r\n          client_secret: clientSecret,\r\n          appIdentifier: `${appIdentifier}`\r\n        }),\r\n        body: body ? body : null,\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.verifyvua, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * User Registration\r\n   * @param organisationid\r\n   * @param clientId\r\n   * @param clientSecret\r\n   * @param body\r\n   */\r\n  userRegistration(organisationid: string, clientId: string, clientSecret: string,\r\n                   appIdentifier: { appName?: string, appIdentifier: string }[], body: {\r\n                   name: string, phone_number: string, terms_and_conditions: boolean, vua: string }): any {\r\n    try {\r\n      if (!organisationid || !clientId || !clientSecret || !body) { throw new Error('All parameters are required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          organisationId: organisationid,\r\n          client_id: clientId,\r\n          client_secret: clientSecret,\r\n          appIdentifier: `${appIdentifier}`\r\n        }),\r\n        body: body ? body : null,\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.userRegistration, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify OTP\r\n   * @param organisationid\r\n   * @param clientId\r\n   * @param clientSecret\r\n   * @param body\r\n   */\r\n  verifyOtp(organisationid: string, clientId: string, clientSecret: string,\r\n            appIdentifier: { appName?: string, appIdentifier: string }[],\r\n            body: { phone_number: string, otp_reference: string, code: string }): any {\r\n\r\n    try {\r\n      if (!organisationid || !clientId || !clientSecret || !body) { throw new Error('All parameters are required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          organisationId: organisationid,\r\n          client_id: clientId,\r\n          client_secret: clientSecret,\r\n          appIdentifier: `${appIdentifier}`\r\n        }),\r\n        body: body ? body : null,\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.verifyotp, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            if (response.status && response.sessionId) {\r\n              sessionStorage.setItem('sessionId', response.sessionId);\r\n            }\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register as Corporate User.\r\n   * @param body\r\n   */\r\n  registerAsCorpUser(body: { mobileNumber: string, timestamp: string, pan: string }): any {\r\n    try {\r\n      if (!body) { throw new Error('All parameters are required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n        }),\r\n        body: body ? body : null,\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.regascorpuser, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            if (response.status === 'SUCCESS' && response.sessionToken) {\r\n              sessionStorage.setItem('sessionToken', response.sessionToken);\r\n            }\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get FIP List.\r\n   * @param sessionId\r\n   */\r\n  getFipList(sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n      };\r\n      return this.http\r\n        .request('GET', this.url + APINAME.fipList, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  // concent approval and rejection.\r\n\r\n  /**\r\n   * Customer Dashboard/\r\n   * @param sessionId\r\n   */\r\n  customerDashboard(sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n      };\r\n      return this.http\r\n        .request('GET', this.url + APINAME.customerDashboard, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Consent Request Details\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  getConsentDetails(body: { consentHandles: string[] }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.consentDetails, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Approve Consent with Authentication\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  approve(body: {consentHandle: string, otp: string, accounts: {type: string, data: {accType: string,\r\n          accRefNumber: string, maskedAccNumber: string, fipId: string, userInfo: {}}}[]},\r\n          sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.approveConsent, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n  /**\r\n   * Reject Consent with Authentication\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  reject(body: { consentHandle: string, otp: string }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.rejectConsent, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reject Consent with Authentication\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  consentOTP(body: { actionType: string,identifierValue:string,identifierType:string }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.OTPSend, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n \r\n  /**\r\n   * Consent Allow\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  consentAllow(body: { consentHandle: string,\r\n    accounts: {\r\n        type: string,\r\n        data: {\r\n          accType: string,\r\n          accRefNumber: string,\r\n          maskedAccNumber: string,\r\n          fipId: string,\r\n          userInfo: {}}\r\n      }[]}, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid,\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST',this.url + APINAME.consentAllow, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Consent Deny\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  consentDeny(body: { consentHandle: string}, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.consentDeny, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Multi Account Link\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  multiAccountlink(body: { \r\n    accounts: {\r\n        type: string,\r\n        data: {\r\n          accType: string,\r\n          accRefNumber: string,\r\n          maskedAccNumber: string,\r\n          fipId: string,\r\n          userInfo: {}}\r\n      }[]}, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.multiAccountlink, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n// identifierGenerateOTP\r\n// identifierVerifyOTP\r\n/**\r\n   * OTP Generation without action Type\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  identifierGenerateOTP(body: { identifierValue:string,identifierType:string }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? {actionType:'VERIFY_IDENTIFIER', ...body } : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.OTPSend, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n /**\r\n   * OTP Validation\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  identifierVerifyOTP(body: { \r\n    actionType:String,\r\n    OTP:String,\r\n    identifierValue:String,\r\n    identifierType:string\r\n    }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? {actionType:'VERIFY_IDENTIFIER', ...body } : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.otpValidate, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n  /**\r\n   * Check mobile number VUA\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  verifyOnemoneyProfile(organisationid: string, clientId: string, clientSecret: string,\r\n    appIdentifier: { appName?: string, appIdentifier: string }[],\r\n    body: { username: string, }): any {\r\n    try {\r\n      //const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!body) { throw new Error('Body is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          organisationId: organisationid,\r\n          client_id: clientId,\r\n          client_secret: clientSecret,\r\n          appIdentifier: `${appIdentifier}`,\r\n          \r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.verifyProfileVua, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n\r\n    }\r\n\r\n    /**\r\n   * Account discovery API\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  discoverAccountFIP(identifier: { category: string, type: string, value: string }[],fipId?: string, sessionId?: string) {\r\n    try {\r\n      if (!identifier) { throw new Error('Identifier is required'); }\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.accountdiscover}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: {\r\n          identifiers: [{\r\n            category: `${identifier[0].category}`, type: `${identifier[0].type}`,\r\n            value: `${identifier[0].value}`\r\n          }], fipId: `${fipId}`\r\n        }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n}\r\n","/*\r\n * Public API Surface of onemoney-websdk\r\n */\r\n\r\nexport * from './lib/onemoney-websdk.service';\r\n// export * from './lib/onemoney-websdk.component';\r\n //export * from './lib/onemoney-websdk.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {EnvService as ɵa} from './lib/env.service';"],"names":[],"mappings":"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"}