{"version":3,"file":"onemoney-headless-websdk.umd.js","sources":["../../../projects/onemoney-headless-websdk/src/lib/env.service.ts","../../../projects/onemoney-headless-websdk/src/lib/onemoney-websdk.service.ts","../../../../projects/onemoney-headless-websdk/src/public-api.ts","../../../../projects/onemoney-headless-websdk/src/onemoney-headless-websdk.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EnvService {\r\n\r\n  //API URL for Onemoney Web\r\n  public apiUrl = 'https://api-sandbox.onemoney.in/';\r\n  public uatUrl = 'https://app-uat.onemoney.in/';\r\n  public prodUrl = 'https://aa-app.onemoney.in/';\r\n  public devUrl = 'https://dev-aa-app.aws.onemoney.in/';\r\n  \r\n  //public prodUrl = 'https://api-sandbox.onemoney.in/';\r\n\r\n  \r\n  //Base URL for Web SDK of Onemoney Server\r\n  public omApiUrl = '';\r\n  public enableDebug = true;\r\n\r\n  constructor() { }\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { EnvService } from './env.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\n\r\nconst APINAME = {\r\n  userProfile: 'user/user-profile',\r\n  discover: 'sdk/api/v1/accounts/discover',\r\n  authtrigger: 'sdk/api/v1/account/auth/trigger',\r\n  accountverify: 'sdk/api/v1/account/auth/verify',\r\n  loginOTPVerify: 'app/loginwithotp/verify',\r\n  accountlist: 'sdk/api/v1/linkedaccount/list',\r\n  discoveredaccountlist: 'sdk/api/v1/discoveredaccount/list',\r\n  logout: 'user/logout',\r\n  loginOTPSend: 'app/loginwithotp/send',\r\n  OTPSend:'app/otp/send',\r\n\r\n  verifyvua: 'user/verifyvua',\r\n  userRegistration: 'user/sdksignupwithotp/send',\r\n  verifyotp: 'user/sdksignupwithotp/verify',\r\n  regascorpuser: 'sdk/api/v1/session/init',\r\n  fipList: 'app/fip',\r\n  \r\n\r\n  // concent approval and rejection.\r\n  customerDashboard: 'app/dashboard',\r\n  consentDetails: 'sdk/api/v1/bulkconsent/info',\r\n  approveConsent: 'sdk/api/v1/consentwithauth/allow',\r\n  rejectConsent: 'sdk/api/v1/consentwithauth/deny',\r\n\r\n  consentAllow: 'sdk/api/v1/consent/allow',\r\n  consentDeny: 'sdk/api/v1/consent/deny',\r\n  multiAccountlink: 'sdk/api/v1/bulkaccount/auth/trigger',\r\n  //Phase 3 new APIs\r\n  otpValidate:'app/otp/validate',\r\n  verifyProfileVua:'user/verifyprofile',\r\n  //discover API \r\n  accountdiscover:'sdk/api/v1/accounts/discover/multiplefips'\r\n};\r\n@Injectable({\r\n  providedIn:'root'\r\n})\r\n\r\nexport class OnemoneyWebsdkService {\r\n  url: string;\r\n\r\n  constructor(private http: HttpClient, private envService: EnvService) {\r\n    this.url = this.envService.uatUrl;\r\n  }\r\n\r\n\r\n  /**\r\n   * To discover accounts\r\n   * @param fipId\r\n   * @param identifier\r\n   * @param sessionId\r\n   */\r\n  discoverAccount(fipId: string, identifier: { category: string, type: string, value: string }[], sessionId?: string) {\r\n    try {\r\n      if (!fipId && !identifier) { throw new Error('Flip Id && Identifier is required'); }\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.discover}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: {\r\n          identifiers: [{\r\n            category: `${identifier[0].category}`, type: `${identifier[0].type}`,\r\n            value: `${identifier[0].value}`\r\n          }], fipId: `${fipId}`\r\n        }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To get list of discovered acccounts\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  getUserProfile(sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'GET',\r\n        url: `${this.url}${APINAME.userProfile}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n  /**\r\n   * To auth Trigger accounts // Link Accounts with OTP SEND\r\n   * @param account\r\n   * @param sessionId\r\n   */\r\n  accountAuth(account: {\r\n    type: string, data: {\r\n      accType: string, accRefNumber: string,\r\n      maskedAccNumber: string, fipId: string, userInfo: {}\r\n    }\r\n  },          sessionId?: string) {\r\n    try {\r\n      if (!account) { throw new Error('Account is required'); }\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.authtrigger}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: {\r\n          account: {\r\n            type: `${account.type}`, data: {\r\n              accType: `${account.data.accType}`,\r\n              // tslint:disable-next-line: max-line-length\r\n              accRefNumber: `${account.data.accRefNumber}`, maskedAccNumber: `${account.data.maskedAccNumber}`, fiId: `${account.data.fipId}`, userInfo: `${account.data.userInfo}`\r\n            }\r\n          }\r\n        }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To auth Trigger accounts // Link Accounts with OTP Verify\r\n   * @param refNumber\r\n   * @param authToken\r\n   * @param sessionId\r\n   */\r\n  accountVerify(refNumber: string, authToken: string, sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`,\r\n      });\r\n\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.accountverify}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: { refNumber: `${refNumber}`, authToken: `${authToken}` }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To auth Trigger accounts // Link Accounts with OTP Verify\r\n   * @param organisationId\r\n   * @param client_id\r\n   * @param client_secret\r\n   * @param appIdentifier\r\n   * @param phone_number\r\n   */\r\n  loginOTP(organisationId: string, client_id: string, client_secret: string,\r\n           appIdentifier:[{ appName?:String, appIdentifier: string }], phone_number: string) {\r\n    try {\r\n      if (!organisationId) { throw new Error('organisationId is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        organisationId: `${organisationId}`,\r\n        client_id: `${client_id}`,\r\n        client_secret: `${client_secret}`,\r\n        appIdentifier: `${appIdentifier}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.loginOTPSend}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: { phone_number: `${phone_number}` }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Login otp validation for a user session, through the SDK // Link Accounts with OTP Verify.\r\n   * @param organisationId\r\n   * @param client_id\r\n   * @param client_secret\r\n   * @param appIdentifier\r\n   * @param phone_number\r\n   * @param otp_reference\r\n   * @param code\r\n   */\r\n  loginOTPVerify(organisationId: string, client_id: string, client_secret: string,\r\n                 appIdentifier: {appName?: string, appIdentifier: string }[], phone_number: string, otp_reference: string, code: string) {\r\n    try {\r\n      if (!organisationId) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        organisationId: `${organisationId}`,\r\n        client_id: `${client_id}`,\r\n        client_secret: `${client_secret}`,\r\n        appIdentifier: `${appIdentifier}`\r\n      });\r\n\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.loginOTPVerify}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: { phone_number: `${phone_number}`, otp_reference: `${otp_reference}`, code: `${code}` }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            if (response.sessionId) { sessionStorage.setItem('sessionId', response.sessionId); }\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * GET Linked Accounts List.\r\n   * @param sessionId\r\n   * Returns the list of linked accounts by the customer.\r\n   */\r\n  getListOfLinkedAccounts(sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'GET',\r\n        url: `${this.url}${APINAME.accountlist}`,\r\n      };\r\n      const data: any = {\r\n        headers: header\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * GET Discovered Accounts List\r\n   * @param sessionId\r\n   * Returns the list of discovered accounts.\r\n   */\r\n  getDiscoveredAccountList(sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'GET',\r\n        url: `${this.url}${APINAME.discoveredaccountlist}`,\r\n      };\r\n      const data: any = {\r\n        headers: header\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * POST Logout // Intended for a consent manager to enable a user to logout of his session.\r\n   * @param sessionId\r\n   */\r\n  logout(sessionId?: string) {\r\n    try {\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.logout}`,\r\n      };\r\n      const data: any = {\r\n        headers: header\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify uva\r\n   * @param organisationid\r\n   * @param clientId\r\n   * @param clientSecret\r\n   * @param appIdentifier\r\n   * @param body\r\n   */\r\n  verifyVua(organisationid: string, clientId: string, clientSecret: string, appIdentifier: { appName?: string, appIdentifier: string }[],\r\n            body: { vua: string }): any {\r\n    try {\r\n      if (!organisationid || !clientId || !clientSecret || !body) { throw new Error('All parameters are required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          organisationId: organisationid,\r\n          client_id: clientId,\r\n          client_secret: clientSecret,\r\n          appIdentifier: `${appIdentifier}`\r\n        }),\r\n        body: body ? body : null,\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.verifyvua, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * User Registration\r\n   * @param organisationid\r\n   * @param clientId\r\n   * @param clientSecret\r\n   * @param body\r\n   */\r\n  userRegistration(organisationid: string, clientId: string, clientSecret: string,\r\n                   appIdentifier: { appName?: string, appIdentifier: string }[], body: {\r\n                   name: string, phone_number: string, terms_and_conditions: boolean, vua: string }): any {\r\n    try {\r\n      if (!organisationid || !clientId || !clientSecret || !body) { throw new Error('All parameters are required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          organisationId: organisationid,\r\n          client_id: clientId,\r\n          client_secret: clientSecret,\r\n          appIdentifier: `${appIdentifier}`\r\n        }),\r\n        body: body ? body : null,\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.userRegistration, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify OTP\r\n   * @param organisationid\r\n   * @param clientId\r\n   * @param clientSecret\r\n   * @param body\r\n   */\r\n  verifyOtp(organisationid: string, clientId: string, clientSecret: string,\r\n            appIdentifier: { appName?: string, appIdentifier: string }[],\r\n            body: { phone_number: string, otp_reference: string, code: string }): any {\r\n\r\n    try {\r\n      if (!organisationid || !clientId || !clientSecret || !body) { throw new Error('All parameters are required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          organisationId: organisationid,\r\n          client_id: clientId,\r\n          client_secret: clientSecret,\r\n          appIdentifier: `${appIdentifier}`\r\n        }),\r\n        body: body ? body : null,\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.verifyotp, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            if (response.status && response.sessionId) {\r\n              sessionStorage.setItem('sessionId', response.sessionId);\r\n            }\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register as Corporate User.\r\n   * @param body\r\n   */\r\n  registerAsCorpUser(body: { mobileNumber: string, timestamp: string, pan: string }): any {\r\n    try {\r\n      if (!body) { throw new Error('All parameters are required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n        }),\r\n        body: body ? body : null,\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.regascorpuser, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            if (response.status === 'SUCCESS' && response.sessionToken) {\r\n              sessionStorage.setItem('sessionToken', response.sessionToken);\r\n            }\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get FIP List.\r\n   * @param sessionId\r\n   */\r\n  getFipList(sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n      };\r\n      return this.http\r\n        .request('GET', this.url + APINAME.fipList, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  // concent approval and rejection.\r\n\r\n  /**\r\n   * Customer Dashboard/\r\n   * @param sessionId\r\n   */\r\n  customerDashboard(sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n      };\r\n      return this.http\r\n        .request('GET', this.url + APINAME.customerDashboard, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Consent Request Details\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  getConsentDetails(body: { consentHandles: string[] }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.consentDetails, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Approve Consent with Authentication\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  approve(body: {consentHandle: string, otp: string, accounts: {type: string, data: {accType: string,\r\n          accRefNumber: string, maskedAccNumber: string, fipId: string, userInfo: {}}}[]},\r\n          sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.approveConsent, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n  /**\r\n   * Reject Consent with Authentication\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  reject(body: { consentHandle: string, otp: string }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.rejectConsent, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reject Consent with Authentication\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  consentOTP(body: { actionType: string,identifierValue:string,identifierType:string }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.OTPSend, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n \r\n  /**\r\n   * Consent Allow\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  consentAllow(body: { consentHandle: string,\r\n    accounts: {\r\n        type: string,\r\n        data: {\r\n          accType: string,\r\n          accRefNumber: string,\r\n          maskedAccNumber: string,\r\n          fipId: string,\r\n          userInfo: {}}\r\n      }[]}, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid,\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST',this.url + APINAME.consentAllow, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Consent Deny\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  consentDeny(body: { consentHandle: string}, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.consentDeny, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Multi Account Link\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  multiAccountlink(body: { \r\n    accounts: {\r\n        type: string,\r\n        data: {\r\n          accType: string,\r\n          accRefNumber: string,\r\n          maskedAccNumber: string,\r\n          fipId: string,\r\n          userInfo: {}}\r\n      }[]}, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.multiAccountlink, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n// identifierGenerateOTP\r\n// identifierVerifyOTP\r\n/**\r\n   * OTP Generation without action Type\r\n   * @param sessionId\r\n   * @param body\r\n   */\r\n  identifierGenerateOTP(body: { identifierValue:string,identifierType:string }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? {actionType:'VERIFY_IDENTIFIER', ...body } : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.OTPSend, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n /**\r\n   * OTP Validation\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  identifierVerifyOTP(body: { \r\n    actionType:String,\r\n    OTP:String,\r\n    identifierValue:String,\r\n    identifierType:string\r\n    }, sessionId?: string): any {\r\n    try {\r\n      const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionid || !body) { throw new Error('Session Id is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          sessionId: sessionid\r\n        }),\r\n        body: body ? {actionType:'VERIFY_IDENTIFIER', ...body } : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.otpValidate, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n  /**\r\n   * Check mobile number VUA\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  verifyOnemoneyProfile(organisationid: string, clientId: string, clientSecret: string,\r\n    appIdentifier: { appName?: string, appIdentifier: string }[],\r\n    body: { username: string, }): any {\r\n    try {\r\n      //const sessionid = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!body) { throw new Error('Body is required'); }\r\n      const data: any = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': 'application/json',\r\n          organisationId: organisationid,\r\n          client_id: clientId,\r\n          client_secret: clientSecret,\r\n          appIdentifier: `${appIdentifier}`,\r\n          \r\n        }),\r\n        body: body ? body : null\r\n      };\r\n      return this.http\r\n        .request('POST', this.url + APINAME.verifyProfileVua, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n\r\n    }\r\n\r\n    /**\r\n   * Account discovery API\r\n   * @param body\r\n   * @param sessionId\r\n   */\r\n  discoverAccountFIP(identifier: { category: string, type: string, value: string }[],fipId?: string, sessionId?: string) {\r\n    try {\r\n      if (!identifier) { throw new Error('Identifier is required'); }\r\n      const sessionID = sessionId || sessionStorage.getItem('sessionId');\r\n      if (!sessionID) { throw new Error('Session Id is required'); }\r\n      const header = new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        sessionId: `${sessionID}`\r\n      });\r\n      const options = {\r\n        method: 'POST',\r\n        url: `${this.url}${APINAME.accountdiscover}`,\r\n      };\r\n      const data: any = {\r\n        headers: header,\r\n        body: {\r\n          identifiers: [{\r\n            category: `${identifier[0].category}`, type: `${identifier[0].type}`,\r\n            value: `${identifier[0].value}`\r\n          }], fipId: `${fipId}`\r\n        }\r\n      };\r\n      return this.http\r\n        .request(options.method, options.url, data)\r\n        .pipe(\r\n          map(res => {\r\n            const response: any = res;\r\n            return response;\r\n          })\r\n        );\r\n    } catch (error) {\r\n      return of(error);\r\n    }\r\n  }\r\n\r\n}\r\n","/*\r\n * Public API Surface of onemoney-websdk\r\n */\r\n\r\nexport * from './lib/onemoney-websdk.service';\r\n// export * from './lib/onemoney-websdk.component';\r\n //export * from './lib/onemoney-websdk.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {EnvService as ɵa} from './lib/env.service';"],"names":["Injectable","HttpHeaders","map","of","HttpClient"],"mappings":"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"}