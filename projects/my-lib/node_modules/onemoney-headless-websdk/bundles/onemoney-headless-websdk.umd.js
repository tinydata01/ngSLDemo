(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('@angular/core'), require('rxjs/operators'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('onemoney-headless-websdk', ['exports', '@angular/common/http', '@angular/core', 'rxjs/operators', 'rxjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['onemoney-headless-websdk'] = {}, global.ng.common.http, global.ng.core, global.rxjs.operators, global.rxjs));
}(this, (function (exports, i1, i0, operators, rxjs) { 'use strict';

    var EnvService = /** @class */ (function () {
        function EnvService() {
            //API URL for Onemoney Web
            this.apiUrl = 'https://api-sandbox.onemoney.in/';
            this.uatUrl = 'https://app-uat.onemoney.in/';
            this.prodUrl = 'https://aa-app.onemoney.in/';
            this.devUrl = 'https://dev-aa-app.aws.onemoney.in/';
            //public prodUrl = 'https://api-sandbox.onemoney.in/';
            //Base URL for Web SDK of Onemoney Server
            this.omApiUrl = '';
            this.enableDebug = true;
        }
        return EnvService;
    }());
    EnvService.ɵprov = i0.ɵɵdefineInjectable({ factory: function EnvService_Factory() { return new EnvService(); }, token: EnvService, providedIn: "root" });
    EnvService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    EnvService.ctorParameters = function () { return []; };

    var APINAME = {
        userProfile: 'user/user-profile',
        discover: 'sdk/api/v1/accounts/discover',
        authtrigger: 'sdk/api/v1/account/auth/trigger',
        accountverify: 'sdk/api/v1/account/auth/verify',
        loginOTPVerify: 'app/loginwithotp/verify',
        accountlist: 'sdk/api/v1/linkedaccount/list',
        discoveredaccountlist: 'sdk/api/v1/discoveredaccount/list',
        logout: 'user/logout',
        loginOTPSend: 'app/loginwithotp/send',
        OTPSend: 'app/otp/send',
        verifyvua: 'user/verifyvua',
        userRegistration: 'user/sdksignupwithotp/send',
        verifyotp: 'user/sdksignupwithotp/verify',
        regascorpuser: 'sdk/api/v1/session/init',
        fipList: 'app/fip',
        // concent approval and rejection.
        customerDashboard: 'app/dashboard',
        consentDetails: 'sdk/api/v1/bulkconsent/info',
        approveConsent: 'sdk/api/v1/consentwithauth/allow',
        rejectConsent: 'sdk/api/v1/consentwithauth/deny',
        consentAllow: 'sdk/api/v1/consent/allow',
        consentDeny: 'sdk/api/v1/consent/deny',
        multiAccountlink: 'sdk/api/v1/bulkaccount/auth/trigger',
        //Phase 3 new APIs
        otpValidate: 'app/otp/validate',
        verifyProfileVua: 'user/verifyprofile',
        //discover API 
        accountdiscover: 'sdk/api/v1/accounts/discover/multiplefips'
    };
    var OnemoneyWebsdkService = /** @class */ (function () {
        function OnemoneyWebsdkService(http, envService) {
            this.http = http;
            this.envService = envService;
            this.url = this.envService.uatUrl;
        }
        /**
         * To discover accounts
         * @param fipId
         * @param identifier
         * @param sessionId
         */
        OnemoneyWebsdkService.prototype.discoverAccount = function (fipId, identifier, sessionId) {
            try {
                if (!fipId && !identifier) {
                    throw new Error('Flip Id && Identifier is required');
                }
                var sessionID = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionID) {
                    throw new Error('Session Id is required');
                }
                var header = new i1.HttpHeaders({
                    'Content-Type': 'application/json',
                    sessionId: "" + sessionID
                });
                var options = {
                    method: 'POST',
                    url: "" + this.url + APINAME.discover,
                };
                var data = {
                    headers: header,
                    body: {
                        identifiers: [{
                                category: "" + identifier[0].category, type: "" + identifier[0].type,
                                value: "" + identifier[0].value
                            }], fipId: "" + fipId
                    }
                };
                return this.http
                    .request(options.method, options.url, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * To get list of discovered acccounts
         * @param body
         * @param sessionId
         */
        OnemoneyWebsdkService.prototype.getUserProfile = function (sessionId) {
            try {
                var sessionID = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionID) {
                    throw new Error('Session Id is required');
                }
                var header = new i1.HttpHeaders({
                    'Content-Type': 'application/json',
                    sessionId: "" + sessionID
                });
                var options = {
                    method: 'GET',
                    url: "" + this.url + APINAME.userProfile,
                };
                var data = {
                    headers: header,
                };
                return this.http
                    .request(options.method, options.url, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * To auth Trigger accounts // Link Accounts with OTP SEND
         * @param account
         * @param sessionId
         */
        OnemoneyWebsdkService.prototype.accountAuth = function (account, sessionId) {
            try {
                if (!account) {
                    throw new Error('Account is required');
                }
                var sessionID = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionID) {
                    throw new Error('Session Id is required');
                }
                var header = new i1.HttpHeaders({
                    'Content-Type': 'application/json',
                    sessionId: "" + sessionID
                });
                var options = {
                    method: 'POST',
                    url: "" + this.url + APINAME.authtrigger,
                };
                var data = {
                    headers: header,
                    body: {
                        account: {
                            type: "" + account.type, data: {
                                accType: "" + account.data.accType,
                                // tslint:disable-next-line: max-line-length
                                accRefNumber: "" + account.data.accRefNumber, maskedAccNumber: "" + account.data.maskedAccNumber, fiId: "" + account.data.fipId, userInfo: "" + account.data.userInfo
                            }
                        }
                    }
                };
                return this.http
                    .request(options.method, options.url, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * To auth Trigger accounts // Link Accounts with OTP Verify
         * @param refNumber
         * @param authToken
         * @param sessionId
         */
        OnemoneyWebsdkService.prototype.accountVerify = function (refNumber, authToken, sessionId) {
            try {
                var sessionID = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionID) {
                    throw new Error('Session Id is required');
                }
                var header = new i1.HttpHeaders({
                    'Content-Type': 'application/json',
                    sessionId: "" + sessionID,
                });
                var options = {
                    method: 'POST',
                    url: "" + this.url + APINAME.accountverify,
                };
                var data = {
                    headers: header,
                    body: { refNumber: "" + refNumber, authToken: "" + authToken }
                };
                return this.http
                    .request(options.method, options.url, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * To auth Trigger accounts // Link Accounts with OTP Verify
         * @param organisationId
         * @param client_id
         * @param client_secret
         * @param appIdentifier
         * @param phone_number
         */
        OnemoneyWebsdkService.prototype.loginOTP = function (organisationId, client_id, client_secret, appIdentifier, phone_number) {
            try {
                if (!organisationId) {
                    throw new Error('organisationId is required');
                }
                var header = new i1.HttpHeaders({
                    'Content-Type': 'application/json',
                    organisationId: "" + organisationId,
                    client_id: "" + client_id,
                    client_secret: "" + client_secret,
                    appIdentifier: "" + appIdentifier
                });
                var options = {
                    method: 'POST',
                    url: "" + this.url + APINAME.loginOTPSend,
                };
                var data = {
                    headers: header,
                    body: { phone_number: "" + phone_number }
                };
                return this.http
                    .request(options.method, options.url, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * Login otp validation for a user session, through the SDK // Link Accounts with OTP Verify.
         * @param organisationId
         * @param client_id
         * @param client_secret
         * @param appIdentifier
         * @param phone_number
         * @param otp_reference
         * @param code
         */
        OnemoneyWebsdkService.prototype.loginOTPVerify = function (organisationId, client_id, client_secret, appIdentifier, phone_number, otp_reference, code) {
            try {
                if (!organisationId) {
                    throw new Error('Session Id is required');
                }
                var header = new i1.HttpHeaders({
                    'Content-Type': 'application/json',
                    organisationId: "" + organisationId,
                    client_id: "" + client_id,
                    client_secret: "" + client_secret,
                    appIdentifier: "" + appIdentifier
                });
                var options = {
                    method: 'POST',
                    url: "" + this.url + APINAME.loginOTPVerify,
                };
                var data = {
                    headers: header,
                    body: { phone_number: "" + phone_number, otp_reference: "" + otp_reference, code: "" + code }
                };
                return this.http
                    .request(options.method, options.url, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    if (response.sessionId) {
                        sessionStorage.setItem('sessionId', response.sessionId);
                    }
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * GET Linked Accounts List.
         * @param sessionId
         * Returns the list of linked accounts by the customer.
         */
        OnemoneyWebsdkService.prototype.getListOfLinkedAccounts = function (sessionId) {
            try {
                var sessionID = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionID) {
                    throw new Error('Session Id is required');
                }
                var header = new i1.HttpHeaders({
                    'Content-Type': 'application/json',
                    sessionId: "" + sessionID
                });
                var options = {
                    method: 'GET',
                    url: "" + this.url + APINAME.accountlist,
                };
                var data = {
                    headers: header
                };
                return this.http
                    .request(options.method, options.url, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * GET Discovered Accounts List
         * @param sessionId
         * Returns the list of discovered accounts.
         */
        OnemoneyWebsdkService.prototype.getDiscoveredAccountList = function (sessionId) {
            try {
                var sessionID = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionID) {
                    throw new Error('Session Id is required');
                }
                var header = new i1.HttpHeaders({
                    'Content-Type': 'application/json',
                    sessionId: "" + sessionID
                });
                var options = {
                    method: 'GET',
                    url: "" + this.url + APINAME.discoveredaccountlist,
                };
                var data = {
                    headers: header
                };
                return this.http
                    .request(options.method, options.url, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * POST Logout // Intended for a consent manager to enable a user to logout of his session.
         * @param sessionId
         */
        OnemoneyWebsdkService.prototype.logout = function (sessionId) {
            try {
                var sessionID = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionID) {
                    throw new Error('Session Id is required');
                }
                var header = new i1.HttpHeaders({
                    'Content-Type': 'application/json',
                    sessionId: "" + sessionID
                });
                var options = {
                    method: 'POST',
                    url: "" + this.url + APINAME.logout,
                };
                var data = {
                    headers: header
                };
                return this.http
                    .request(options.method, options.url, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * Verify uva
         * @param organisationid
         * @param clientId
         * @param clientSecret
         * @param appIdentifier
         * @param body
         */
        OnemoneyWebsdkService.prototype.verifyVua = function (organisationid, clientId, clientSecret, appIdentifier, body) {
            try {
                if (!organisationid || !clientId || !clientSecret || !body) {
                    throw new Error('All parameters are required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        organisationId: organisationid,
                        client_id: clientId,
                        client_secret: clientSecret,
                        appIdentifier: "" + appIdentifier
                    }),
                    body: body ? body : null,
                };
                return this.http
                    .request('POST', this.url + APINAME.verifyvua, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * User Registration
         * @param organisationid
         * @param clientId
         * @param clientSecret
         * @param body
         */
        OnemoneyWebsdkService.prototype.userRegistration = function (organisationid, clientId, clientSecret, appIdentifier, body) {
            try {
                if (!organisationid || !clientId || !clientSecret || !body) {
                    throw new Error('All parameters are required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        organisationId: organisationid,
                        client_id: clientId,
                        client_secret: clientSecret,
                        appIdentifier: "" + appIdentifier
                    }),
                    body: body ? body : null,
                };
                return this.http
                    .request('POST', this.url + APINAME.userRegistration, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * Verify OTP
         * @param organisationid
         * @param clientId
         * @param clientSecret
         * @param body
         */
        OnemoneyWebsdkService.prototype.verifyOtp = function (organisationid, clientId, clientSecret, appIdentifier, body) {
            try {
                if (!organisationid || !clientId || !clientSecret || !body) {
                    throw new Error('All parameters are required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        organisationId: organisationid,
                        client_id: clientId,
                        client_secret: clientSecret,
                        appIdentifier: "" + appIdentifier
                    }),
                    body: body ? body : null,
                };
                return this.http
                    .request('POST', this.url + APINAME.verifyotp, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    if (response.status && response.sessionId) {
                        sessionStorage.setItem('sessionId', response.sessionId);
                    }
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * Register as Corporate User.
         * @param body
         */
        OnemoneyWebsdkService.prototype.registerAsCorpUser = function (body) {
            try {
                if (!body) {
                    throw new Error('All parameters are required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                    }),
                    body: body ? body : null,
                };
                return this.http
                    .request('POST', this.url + APINAME.regascorpuser, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    if (response.status === 'SUCCESS' && response.sessionToken) {
                        sessionStorage.setItem('sessionToken', response.sessionToken);
                    }
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * Get FIP List.
         * @param sessionId
         */
        OnemoneyWebsdkService.prototype.getFipList = function (sessionId) {
            try {
                var sessionid = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionid) {
                    throw new Error('Session Id is required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        sessionId: sessionid
                    }),
                };
                return this.http
                    .request('GET', this.url + APINAME.fipList, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        // concent approval and rejection.
        /**
         * Customer Dashboard/
         * @param sessionId
         */
        OnemoneyWebsdkService.prototype.customerDashboard = function (sessionId) {
            try {
                var sessionid = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionid) {
                    throw new Error('Session Id is required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        sessionId: sessionid
                    }),
                };
                return this.http
                    .request('GET', this.url + APINAME.customerDashboard, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * Consent Request Details
         * @param sessionId
         * @param body
         */
        OnemoneyWebsdkService.prototype.getConsentDetails = function (body, sessionId) {
            try {
                var sessionid = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionid || !body) {
                    throw new Error('Session Id is required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        sessionId: sessionid
                    }),
                    body: body ? body : null
                };
                return this.http
                    .request('POST', this.url + APINAME.consentDetails, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * Approve Consent with Authentication
         * @param sessionId
         * @param body
         */
        OnemoneyWebsdkService.prototype.approve = function (body, sessionId) {
            try {
                var sessionid = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionid || !body) {
                    throw new Error('Session Id is required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        sessionId: sessionid
                    }),
                    body: body ? body : null
                };
                return this.http
                    .request('POST', this.url + APINAME.approveConsent, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * Reject Consent with Authentication
         * @param sessionId
         * @param body
         */
        OnemoneyWebsdkService.prototype.reject = function (body, sessionId) {
            try {
                var sessionid = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionid || !body) {
                    throw new Error('Session Id is required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        sessionId: sessionid
                    }),
                    body: body ? body : null
                };
                return this.http
                    .request('POST', this.url + APINAME.rejectConsent, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * Reject Consent with Authentication
         * @param sessionId
         * @param body
         */
        OnemoneyWebsdkService.prototype.consentOTP = function (body, sessionId) {
            try {
                var sessionid = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionid || !body) {
                    throw new Error('Session Id is required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        sessionId: sessionid
                    }),
                    body: body ? body : null
                };
                return this.http
                    .request('POST', this.url + APINAME.OTPSend, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * Consent Allow
         * @param body
         * @param sessionId
         */
        OnemoneyWebsdkService.prototype.consentAllow = function (body, sessionId) {
            try {
                var sessionid = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionid || !body) {
                    throw new Error('Session Id is required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        sessionId: sessionid,
                    }),
                    body: body ? body : null
                };
                return this.http
                    .request('POST', this.url + APINAME.consentAllow, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * Consent Deny
         * @param body
         * @param sessionId
         */
        OnemoneyWebsdkService.prototype.consentDeny = function (body, sessionId) {
            try {
                var sessionid = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionid || !body) {
                    throw new Error('Session Id is required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        sessionId: sessionid
                    }),
                    body: body ? body : null
                };
                return this.http
                    .request('POST', this.url + APINAME.consentDeny, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * Multi Account Link
         * @param body
         * @param sessionId
         */
        OnemoneyWebsdkService.prototype.multiAccountlink = function (body, sessionId) {
            try {
                var sessionid = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionid || !body) {
                    throw new Error('Session Id is required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        sessionId: sessionid
                    }),
                    body: body ? body : null
                };
                return this.http
                    .request('POST', this.url + APINAME.multiAccountlink, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        // identifierGenerateOTP
        // identifierVerifyOTP
        /**
           * OTP Generation without action Type
           * @param sessionId
           * @param body
           */
        OnemoneyWebsdkService.prototype.identifierGenerateOTP = function (body, sessionId) {
            try {
                var sessionid = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionid || !body) {
                    throw new Error('Session Id is required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        sessionId: sessionid
                    }),
                    body: body ? Object.assign({ actionType: 'VERIFY_IDENTIFIER' }, body) : null
                };
                return this.http
                    .request('POST', this.url + APINAME.OTPSend, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
          * OTP Validation
          * @param body
          * @param sessionId
          */
        OnemoneyWebsdkService.prototype.identifierVerifyOTP = function (body, sessionId) {
            try {
                var sessionid = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionid || !body) {
                    throw new Error('Session Id is required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        sessionId: sessionid
                    }),
                    body: body ? Object.assign({ actionType: 'VERIFY_IDENTIFIER' }, body) : null
                };
                return this.http
                    .request('POST', this.url + APINAME.otpValidate, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
         * Check mobile number VUA
         * @param body
         * @param sessionId
         */
        OnemoneyWebsdkService.prototype.verifyOnemoneyProfile = function (organisationid, clientId, clientSecret, appIdentifier, body) {
            try {
                //const sessionid = sessionId || sessionStorage.getItem('sessionId');
                if (!body) {
                    throw new Error('Body is required');
                }
                var data = {
                    headers: new i1.HttpHeaders({
                        'Content-Type': 'application/json',
                        organisationId: organisationid,
                        client_id: clientId,
                        client_secret: clientSecret,
                        appIdentifier: "" + appIdentifier,
                    }),
                    body: body ? body : null
                };
                return this.http
                    .request('POST', this.url + APINAME.verifyProfileVua, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        /**
       * Account discovery API
       * @param body
       * @param sessionId
       */
        OnemoneyWebsdkService.prototype.discoverAccountFIP = function (identifier, fipId, sessionId) {
            try {
                if (!identifier) {
                    throw new Error('Identifier is required');
                }
                var sessionID = sessionId || sessionStorage.getItem('sessionId');
                if (!sessionID) {
                    throw new Error('Session Id is required');
                }
                var header = new i1.HttpHeaders({
                    'Content-Type': 'application/json',
                    sessionId: "" + sessionID
                });
                var options = {
                    method: 'POST',
                    url: "" + this.url + APINAME.accountdiscover,
                };
                var data = {
                    headers: header,
                    body: {
                        identifiers: [{
                                category: "" + identifier[0].category, type: "" + identifier[0].type,
                                value: "" + identifier[0].value
                            }], fipId: "" + fipId
                    }
                };
                return this.http
                    .request(options.method, options.url, data)
                    .pipe(operators.map(function (res) {
                    var response = res;
                    return response;
                }));
            }
            catch (error) {
                return rxjs.of(error);
            }
        };
        return OnemoneyWebsdkService;
    }());
    OnemoneyWebsdkService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OnemoneyWebsdkService_Factory() { return new OnemoneyWebsdkService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(EnvService)); }, token: OnemoneyWebsdkService, providedIn: "root" });
    OnemoneyWebsdkService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    OnemoneyWebsdkService.ctorParameters = function () { return [
        { type: i1.HttpClient },
        { type: EnvService }
    ]; };

    /*
     * Public API Surface of onemoney-websdk
     */
    // export * from './lib/onemoney-websdk.component';
    //export * from './lib/onemoney-websdk.module';

    /**
     * Generated bundle index. Do not edit.
     */

    exports.OnemoneyWebsdkService = OnemoneyWebsdkService;
    exports.ɵa = EnvService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=onemoney-headless-websdk.umd.js.map
