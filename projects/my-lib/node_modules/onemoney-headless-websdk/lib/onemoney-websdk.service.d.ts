import { HttpClient } from '@angular/common/http';
import { EnvService } from './env.service';
export declare class OnemoneyWebsdkService {
    private http;
    private envService;
    url: string;
    constructor(http: HttpClient, envService: EnvService);
    /**
     * To discover accounts
     * @param fipId
     * @param identifier
     * @param sessionId
     */
    discoverAccount(fipId: string, identifier: {
        category: string;
        type: string;
        value: string;
    }[], sessionId?: string): import("rxjs").Observable<any>;
    /**
     * To get list of discovered acccounts
     * @param body
     * @param sessionId
     */
    getUserProfile(sessionId?: string): import("rxjs").Observable<any>;
    /**
     * To auth Trigger accounts // Link Accounts with OTP SEND
     * @param account
     * @param sessionId
     */
    accountAuth(account: {
        type: string;
        data: {
            accType: string;
            accRefNumber: string;
            maskedAccNumber: string;
            fipId: string;
            userInfo: {};
        };
    }, sessionId?: string): import("rxjs").Observable<any>;
    /**
     * To auth Trigger accounts // Link Accounts with OTP Verify
     * @param refNumber
     * @param authToken
     * @param sessionId
     */
    accountVerify(refNumber: string, authToken: string, sessionId?: string): import("rxjs").Observable<any>;
    /**
     * To auth Trigger accounts // Link Accounts with OTP Verify
     * @param organisationId
     * @param client_id
     * @param client_secret
     * @param appIdentifier
     * @param phone_number
     */
    loginOTP(organisationId: string, client_id: string, client_secret: string, appIdentifier: [{
        appName?: String;
        appIdentifier: string;
    }], phone_number: string): import("rxjs").Observable<any>;
    /**
     * Login otp validation for a user session, through the SDK // Link Accounts with OTP Verify.
     * @param organisationId
     * @param client_id
     * @param client_secret
     * @param appIdentifier
     * @param phone_number
     * @param otp_reference
     * @param code
     */
    loginOTPVerify(organisationId: string, client_id: string, client_secret: string, appIdentifier: {
        appName?: string;
        appIdentifier: string;
    }[], phone_number: string, otp_reference: string, code: string): import("rxjs").Observable<any>;
    /**
     * GET Linked Accounts List.
     * @param sessionId
     * Returns the list of linked accounts by the customer.
     */
    getListOfLinkedAccounts(sessionId?: string): import("rxjs").Observable<any>;
    /**
     * GET Discovered Accounts List
     * @param sessionId
     * Returns the list of discovered accounts.
     */
    getDiscoveredAccountList(sessionId?: string): import("rxjs").Observable<any>;
    /**
     * POST Logout // Intended for a consent manager to enable a user to logout of his session.
     * @param sessionId
     */
    logout(sessionId?: string): import("rxjs").Observable<any>;
    /**
     * Verify uva
     * @param organisationid
     * @param clientId
     * @param clientSecret
     * @param appIdentifier
     * @param body
     */
    verifyVua(organisationid: string, clientId: string, clientSecret: string, appIdentifier: {
        appName?: string;
        appIdentifier: string;
    }[], body: {
        vua: string;
    }): any;
    /**
     * User Registration
     * @param organisationid
     * @param clientId
     * @param clientSecret
     * @param body
     */
    userRegistration(organisationid: string, clientId: string, clientSecret: string, appIdentifier: {
        appName?: string;
        appIdentifier: string;
    }[], body: {
        name: string;
        phone_number: string;
        terms_and_conditions: boolean;
        vua: string;
    }): any;
    /**
     * Verify OTP
     * @param organisationid
     * @param clientId
     * @param clientSecret
     * @param body
     */
    verifyOtp(organisationid: string, clientId: string, clientSecret: string, appIdentifier: {
        appName?: string;
        appIdentifier: string;
    }[], body: {
        phone_number: string;
        otp_reference: string;
        code: string;
    }): any;
    /**
     * Register as Corporate User.
     * @param body
     */
    registerAsCorpUser(body: {
        mobileNumber: string;
        timestamp: string;
        pan: string;
    }): any;
    /**
     * Get FIP List.
     * @param sessionId
     */
    getFipList(sessionId?: string): any;
    /**
     * Customer Dashboard/
     * @param sessionId
     */
    customerDashboard(sessionId?: string): any;
    /**
     * Consent Request Details
     * @param sessionId
     * @param body
     */
    getConsentDetails(body: {
        consentHandles: string[];
    }, sessionId?: string): any;
    /**
     * Approve Consent with Authentication
     * @param sessionId
     * @param body
     */
    approve(body: {
        consentHandle: string;
        otp: string;
        accounts: {
            type: string;
            data: {
                accType: string;
                accRefNumber: string;
                maskedAccNumber: string;
                fipId: string;
                userInfo: {};
            };
        }[];
    }, sessionId?: string): any;
    /**
     * Reject Consent with Authentication
     * @param sessionId
     * @param body
     */
    reject(body: {
        consentHandle: string;
        otp: string;
    }, sessionId?: string): any;
    /**
     * Reject Consent with Authentication
     * @param sessionId
     * @param body
     */
    consentOTP(body: {
        actionType: string;
        identifierValue: string;
        identifierType: string;
    }, sessionId?: string): any;
    /**
     * Consent Allow
     * @param body
     * @param sessionId
     */
    consentAllow(body: {
        consentHandle: string;
        accounts: {
            type: string;
            data: {
                accType: string;
                accRefNumber: string;
                maskedAccNumber: string;
                fipId: string;
                userInfo: {};
            };
        }[];
    }, sessionId?: string): any;
    /**
     * Consent Deny
     * @param body
     * @param sessionId
     */
    consentDeny(body: {
        consentHandle: string;
    }, sessionId?: string): any;
    /**
     * Multi Account Link
     * @param body
     * @param sessionId
     */
    multiAccountlink(body: {
        accounts: {
            type: string;
            data: {
                accType: string;
                accRefNumber: string;
                maskedAccNumber: string;
                fipId: string;
                userInfo: {};
            };
        }[];
    }, sessionId?: string): any;
    /**
       * OTP Generation without action Type
       * @param sessionId
       * @param body
       */
    identifierGenerateOTP(body: {
        identifierValue: string;
        identifierType: string;
    }, sessionId?: string): any;
    /**
      * OTP Validation
      * @param body
      * @param sessionId
      */
    identifierVerifyOTP(body: {
        actionType: String;
        OTP: String;
        identifierValue: String;
        identifierType: string;
    }, sessionId?: string): any;
    /**
     * Check mobile number VUA
     * @param body
     * @param sessionId
     */
    verifyOnemoneyProfile(organisationid: string, clientId: string, clientSecret: string, appIdentifier: {
        appName?: string;
        appIdentifier: string;
    }[], body: {
        username: string;
    }): any;
    /**
   * Account discovery API
   * @param body
   * @param sessionId
   */
    discoverAccountFIP(identifier: {
        category: string;
        type: string;
        value: string;
    }[], fipId?: string, sessionId?: string): import("rxjs").Observable<any>;
}
